version: '3.3'
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.1.1
#    image: elasticsearch
    container_name: elasticsearch
    deploy:
#      resources:
#        limits:
#          memory: 6g
#        reservations:
#          memory: 1g
      mode: global
      restart_policy:
        condition: on-failure
      endpoint_mode: dnsrr
    environment:
        cluster.name: "zhongjiaxin-es-cluster"
        bootstrap.memory_lock: "true"
        ES_JAVA_OPTS: "-Xms4g -Xmx4g"
        discovery.zen.ping.unicast.hosts: "[elasticsearch]"
        discovery.zen.minimum_master_nodes: "2"
        xpack.security.enabled: "false"
        xpack.monitoring.enabled: "true"
        xpack.graph.enabled: "false"
        xpack.watcher.enabled: "false"
#      - ELASTIC_PASSWORD:MagicWord
    sysctls:
      - "vm.swappiness=1"
      - "-w vm.max_map_count=262144"
    ulimits:
      memlock: -1
      nofile:
        hard: 65536
        soft: 65536
      nproc: 65538
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - esnet
  logstash:
    image: docker.elastic.co/logstash/logstash:6.1.0
#    image: logstash
    container_name: logstash
    environment:
      xpack.monitoring.enabled: "true"
    deploy:
      placement:
        constraints:
          - node.role != manager
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
    ports:
      - 9600:9600
    volumes:
      - /var/lib/elk/logstash/pipeline/logstash-app.conf:/usr/share/logstash/pipeline/logstash-app.conf
      - /root/logs:/root/logs
#      - /var/lib/elk/logstash/settings/:/usr/share/logstash/config/
    networks:
      - esnet
  kibana:
    image: kibana:latest
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      XPACK_SECURITY_ENABLED: 'false'
      XPACK_MONITORING_ENABLED: 'true'
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    healthcheck:
      test: wget -qO- http://localhost:5601 > /dev/null
      interval: 30s
      retries: 3
    networks:
      - esnet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - esnet
volumes:
  esdata:
    driver: local
networks:
  esnet:
    driver: overlay