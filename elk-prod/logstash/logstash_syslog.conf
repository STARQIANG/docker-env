input {
  syslog {
      type => "syslog"
      port => "514"

  }
  kafka {
    bootstrap_servers => "kafka:9092"
    client_id => "loghouse"
    group_id => "loghouse"
    consumer_threads => 2
    topics => ["log"]
    codec => "json"
    type => "kafka"
  }
}


filter{


    if [type] == "syslog"  {
        grok {
            match => {
                "message" => "%{SYSLOGTIMESTAMP:timestamp} (?<syslog_program>[\w._/%\(\)-]+)(?:\[%{POSINT:pid:int}\])?: %{GREEDYDATA:message}"
            }
            overwrite => "message"
        }
        mutate {
            split=>["syslog_program","|"]
            add_field => [ "appName", "%{[syslog_program][0]}"]
            add_field => ["path_my","service/%{appName}/%{+YYYYMM}/%{+YYYY-MM-dd}-IP-%{host}.log"]
        }

    }
    if [type] == "kafka"  {

        if [beat] {
               mutate {
                 add_field => ["hostname","%{[beat][hostname]}"]
               }
        }
        if "tomcat" in [tags] {
             mutate {
                 split=>["source","/"]
                 add_field => {
                    "path_my" => "app/%{[source][3]}/%{+YYYYMM}/info-%{+YYYY-MM-dd}-%{hostname}.log"
                 }
             }
        }
        if "nginx" in [tags] {

            if [source] =~ "access" {
                 mutate {
                     add_field => {
                        "path_my" => "service/nginx/%{+YYYYMM}/access-%{+YYYY-MM-dd}-%{hostname}.log"
                     }
                 }
            }else {

                 mutate {
                     add_field => {
                        "path_my" => "service/nginx/%{+YYYYMM}/error-%{+YYYY-MM-dd}-%{hostname}.log"
                     }
                 }
            }
        }

    }

}

output {

    if [path_my] {

        if [type] == "syslog"  {
            file {
               path => "/root/logs/%{path_my}"
               codec => plain { format => "%{message}"}
            }
        } else {
            file {
               path => "/root/logs/%{path_my}"
               codec => line { format => "%{message}"}
            }
        }

    }


}

