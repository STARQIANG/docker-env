input {

  beats {
    type => "beats"
    port => 5044
  }
  kafka {
    bootstrap_servers => "kafka.zhongjiaxin.com:9092"
    client_id => "logstash"
    group_id => "logstash"
    consumer_threads => 2
    topics => ["log_after"]
    codec => "json"
    tags => ["log", "kafka_source"]
    type => "log"
  }
}
filter {

    if [beat] {
        mutate {
            replace => [ "hostname", "%{[beat][hostname]}"]
        }
    }

    if [type] == "syslog" {
        grok {
            match => {
                "message" => "%{SYSLOGTIMESTAMP:timestamp} (?<syslog_program>[\w._/%\(\)-]+)(?:\[%{POSINT:pid:int}\])?: %{GREEDYDATA:message}"
            }
            overwrite => "message"
        }
        syslog_pri { }
        mutate {
            split=>["syslog_program","|"]
            add_field => [ "appName", "%{[syslog_program][0]}"]
            add_field => [ "indexTemp", "%{[syslog_program][0]}"]
            replace => [ "hostname", "%{host}"]
            add_tag => [ "%{syslog_program}" ]
        }
    }

    if  (("tomcat" in [tags]) or ([type] == "tomcat")) and  ([message] =~ "^\d{4}\-\d{2}\-\d{2}\s\d+\:\d+\:\d+\,\d+\^\|\^") {
         mutate {
             split=>["message","^|^"]
         }
        if ([message][7]) and ([message][7] =~ "^.{1,}$") {
             mutate {
                   add_field => {
                      "datetime" => "%{[message][0]}"
                      "appName" => "%{[message][1]}"
                      "ext" => "%{[message][2]}"
                      "requestId" => "%{[message][3]}"
                      "level" => "%{[message][4]}"
                      "class" => "%{[message][5]}"
                      "thread" => "%{[message][6]}"
                      "msg" => "%{[message][7]}"
                   }
              }
        } else {
             mutate {
                   add_field => {
                      "datetime" => "%{[message][0]}"
                      "appName" => "%{[message][1]}"
                      "requestId" => "%{[message][2]}"
                      "level" => "%{[message][3]}"
                      "class" => "%{[message][4]}"
                      "thread" => "%{[message][5]}"
                      "msg" => "%{[message][6]}"
                   }
             }
        }


        date {

            locale => "en"
            match => ["datetime", "yyyy-MM-dd HH:mm:ss,SSS"]
            timezone => "+08:00"
            target => "@timestamp"
        }



    } else if ("nginx" in [tags]) or ([type] == "nginx") {

        if ([message] =~ "^\d{4}\/\d{2}\/\d{2}\s{1,}\d{2}:\d{2}")  {

            grok {
                match => [
                    "message", "(?<time>\d{4}/\d{2}/\d{2}\s{1,}\d{2}:\d{2}:\d{2})\s{1,}\[%{DATA:err_severity}\]\s{1,}(%{NUMBER:pid:int}#%{NUMBER}:\s{1,}\*%{NUMBER}|\*%{NUMBER}) %{DATA:err_message}(?:,\s{1,}client:\s{1,}(?<client_ip>%{IP}|%{HOSTNAME}))(?:,\s{1,}server:\s{1,}%{IPORHOST:server})(?:, request: %{QS:request})?(?:, host: %{QS:client_ip})?(?:, referrer: \"%{URI:referrer})?",
                    "message", "(?<time>\d{4}/\d{2}/\d{2}\s{1,}\d{2}:\d{2}:\d{2})\s{1,}\[%{DATA:err_severity}\]\s{1,}%{GREEDYDATA:err_message}"
                ]
            }
            mutate {
                add_field => {
                   "appName" => "nginx_error"
                }
                replace => ["type","nginx_error"]
            }

        } else {

            if [message] =~ "^{" {

                json {
                    source => "message"
                }

                mutate {
                    convert => [ "upstream_response_time","float" ]
                    convert => [ "request_time","float" ]
                }
            }else {
                grok {
                    match => {
                         "message" => "%{IPORHOST:clientip} (?:-|(%{WORD}.%{WORD})) %{USER:ident} \[%{HTTPDATE:datetime}\] \"(?:%{WORD:method} %{NOTSPACE:url}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:status} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent}"
                    }
                }
            }


            date {
                locale => "en"
                match => ["datetime", "dd/MMM/yyyy:HH:mm:ss Z"]
                target => "@timestamp"
            }

            mutate {
                convert => ["status", "integer"]
                convert => [ "bytes","integer" ]
                remove_field => ["datetime","httpversion"]
                replace => ["type","nginx_access"]
            }
            if [clientip] !~ "^127\.|^192\.168\.|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[01]\.|^10\." {    #排除私网地址
                geoip {
                    source =>"clientip"
                    target =>"geoip"
                    database =>"/usr/share/logstash/GeoLite2-City.mmdb"
                    add_field => ["[geoip][coordinates]", "%{[geoip][longitude]}"]
                    add_field => ["[geoip][coordinates]", "%{[geoip][latitude]}" ]
                }
            }

        }

    } else if ("logstash" in [tags]) or ("elastic" in [tags]) or ("kibana" in [tags]) {

        if [message] =~ ".*\[ERROR" {
            mutate {
              add_field => ["alert","%{appName}"]
            }
        }
    }else if [source] and "/gc-" in [source] {
         mutate {
             split=>["source","/"]
             add_field => {
                "appName" => "%{[source][3]}"
                "indexTemp" => "gc-%{[source][3]}"
             }
         }
    }
}
output {

    if ( ("tomcat" in [tags]) or ([type] == "tomcat") ) and ([datetime] =~ "^\d{4}\-\d{2}\-\d{2}\s\d+\:\d+\:\d+\,\d+") {
        if ([appName]) and ([appName] =~ "^.{1,}$" ) {
             elasticsearch {
             hosts => [ "https://es01:9200" ]
             cacert => "/usr/share/logstash/certs/ca/ca.crt"
                 user => "elastic"
                 password => "zhongjiaxin.2017"
                 ssl => true
                index => "tomcat-%{appName}-%{+YYYY.MM.dd}"
             }
        }else {

             elasticsearch {
             hosts => [ "https://es01:9200" ]
             cacert => "/usr/share/logstash/certs/ca/ca.crt"
                 user => "elastic"
                 password => "zhongjiaxin.2017"
                 ssl => true
                 index => "tomcat-%{+YYYY.MM.dd}"
             }
        }

        if ([level]) and ([level] == "ERROR") {
              kafka {
                codec => json
                topic_id => "tomcat_error"
                bootstrap_servers => "kafka.zhongjiaxin.com:9092"
              }
        }
    } else if ("nginx" in [tags]) or ([type] == "nginx_access") or ([type] == "nginx_error") {

        if [type] == "nginx_access" {

            if ([appName]) and ([appName] =~ "^.{1,}$") {
                 elasticsearch {
             hosts => [ "https://es01:9200" ]
             cacert => "/usr/share/logstash/certs/ca/ca.crt"
                     user => "elastic"
                     password => "zhongjiaxin.2017"
                     ssl => true
                    index => "nginx-app-%{appName}-%{+YYYY.MM.dd}"
                 }
            }else {
                 elasticsearch {
             hosts => [ "https://es01:9200" ]
             cacert => "/usr/share/logstash/certs/ca/ca.crt"
                     user => "elastic"
                     password => "zhongjiaxin.2017"
                     ssl => true
                    index => "nginx-%{+YYYY.MM.dd}"
                 }
            }

            if ([status]) and ([status] =~ "^[4|5][0-9]*") {
                  kafka {
                    codec => json
                    topic_id => "system_error"
                    bootstrap_servers => "kafka.zhongjiaxin.com:9092"
                  }
            }
        } else {
             elasticsearch {
             hosts => [ "https://es01:9200" ]
             cacert => "/usr/share/logstash/certs/ca/ca.crt"
                 user => "elastic"
                 password => "zhongjiaxin.2017"
                 ssl => true
                 index => "nginx_error-%{+YYYY.MM.dd}"
             }
            if [message] =~ ".*\[(ERROR|error)" {
                 kafka {
                    codec => json
                    topic_id => "system_error"
                    bootstrap_servers => "kafka.zhongjiaxin.com:9092"
                 }
            }


        }


    } else if ([indexTemp]) and ([indexTemp] =~ "^.{1,}$") {

            elasticsearch {
                 hosts => [ "https://es01:9200" ]
                 cacert => "/usr/share/logstash/certs/ca/ca.crt"
                 user => "elastic"
                 password => "zhongjiaxin.2017"
                 ssl => true
                 index => "%{indexTemp}-%{+YYYY.MM.dd}"
            }
            if [alert] {
                 kafka {
                    codec => json
                    topic_id => "system_error"
                    bootstrap_servers => "kafka.zhongjiaxin.com:9092"
                  }
            }
    } else {
          elasticsearch {
             hosts => [ "https://es01:9200" ]
             cacert => "/usr/share/logstash/certs/ca/ca.crt"
             user => "elastic"
             password => "zhongjiaxin.2017"
             ssl => true
             index => "unknow-%{+YYYY.MM.dd}"
          }
    }

}

